
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'TkAnd TkArray TkArrow TkAsig TkBool TkCBlock TkCBracket TkClosePar TkComma TkConcat TkDeclare TkDo TkEqual TkFalse TkFi TkFor TkGeq TkGreater TkGuard TkId TkIf TkIn TkInt TkLeq TkLess TkMinus TkMult TkNEqual TkNot TkNum TkOBlock TkOBracket TkOd TkOpenPar TkOr TkPlus TkPrint TkRof TkSemicolon TkSkip TkSoForth TkString TkTo TkTrue TkTwoPoints\n    B : TkOBlock DECLARE INSTRUCTIONS TkCBlock\n    \n    DECLARE : TkDeclare LIST_DECLARE\n    \n    LIST_DECLARE : VARIABLE_DECLARATION\n    \n    LIST_DECLARE : VARIABLE_DECLARATION TkSemicolon LIST_DECLARE\n    \n    VARIABLE_DECLARATION : TkId TkTwoPoints TYPE\n    \n    VARIABLE_DECLARATION : TkId TkComma VARIABLE_DECLARATION\n    \n    TYPE : TkInt \n         | TkBool \n         | TkArray\n    \n    INSTRUCTIONS : INSTRUCTION TkSemicolon INSTRUCTIONS\n                  | INSTRUCTION\n    \n    INSTRUCTION : TkFor\n                | TkIf\n                | TkDo\n                | TkPrint\n                | TkId\n    '
    
_lr_action_items = {'TkOBlock':([0,],[2,]),'$end':([1,15,],[0,-1,]),'TkDeclare':([2,],[4,]),'TkFor':([3,12,13,16,21,22,23,24,25,26,],[7,-2,-3,7,-4,-5,-7,-8,-9,-6,]),'TkIf':([3,12,13,16,21,22,23,24,25,26,],[8,-2,-3,8,-4,-5,-7,-8,-9,-6,]),'TkDo':([3,12,13,16,21,22,23,24,25,26,],[9,-2,-3,9,-4,-5,-7,-8,-9,-6,]),'TkPrint':([3,12,13,16,21,22,23,24,25,26,],[10,-2,-3,10,-4,-5,-7,-8,-9,-6,]),'TkId':([3,4,12,13,16,17,19,21,22,23,24,25,26,],[11,14,-2,-3,11,14,14,-4,-5,-7,-8,-9,-6,]),'TkCBlock':([5,6,7,8,9,10,11,20,],[15,-11,-12,-13,-14,-15,-16,-10,]),'TkSemicolon':([6,7,8,9,10,11,13,22,23,24,25,26,],[16,-12,-13,-14,-15,-16,17,-5,-7,-8,-9,-6,]),'TkTwoPoints':([14,],[18,]),'TkComma':([14,],[19,]),'TkInt':([18,],[23,]),'TkBool':([18,],[24,]),'TkArray':([18,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'B':([0,],[1,]),'DECLARE':([2,],[3,]),'INSTRUCTIONS':([3,16,],[5,20,]),'INSTRUCTION':([3,16,],[6,6,]),'LIST_DECLARE':([4,17,],[12,21,]),'VARIABLE_DECLARATION':([4,17,19,],[13,13,26,]),'TYPE':([18,],[22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> B","S'",1,None,None,None),
  ('B -> TkOBlock DECLARE INSTRUCTIONS TkCBlock','B',4,'p_program','yacc.py',14),
  ('DECLARE -> TkDeclare LIST_DECLARE','DECLARE',2,'p_declare','yacc.py',21),
  ('LIST_DECLARE -> VARIABLE_DECLARATION','LIST_DECLARE',1,'p_list_declare_base','yacc.py',27),
  ('LIST_DECLARE -> VARIABLE_DECLARATION TkSemicolon LIST_DECLARE','LIST_DECLARE',3,'p_list_declare','yacc.py',33),
  ('VARIABLE_DECLARATION -> TkId TkTwoPoints TYPE','VARIABLE_DECLARATION',3,'p_list_variables_declare_base','yacc.py',40),
  ('VARIABLE_DECLARATION -> TkId TkComma VARIABLE_DECLARATION','VARIABLE_DECLARATION',3,'p_list_variables_declare','yacc.py',46),
  ('TYPE -> TkInt','TYPE',1,'p_type_varible_declare','yacc.py',51),
  ('TYPE -> TkBool','TYPE',1,'p_type_varible_declare','yacc.py',52),
  ('TYPE -> TkArray','TYPE',1,'p_type_varible_declare','yacc.py',53),
  ('INSTRUCTIONS -> INSTRUCTION TkSemicolon INSTRUCTIONS','INSTRUCTIONS',3,'p_statements','yacc.py',60),
  ('INSTRUCTIONS -> INSTRUCTION','INSTRUCTIONS',1,'p_statements','yacc.py',61),
  ('INSTRUCTION -> TkFor','INSTRUCTION',1,'p_statement','yacc.py',66),
  ('INSTRUCTION -> TkIf','INSTRUCTION',1,'p_statement','yacc.py',67),
  ('INSTRUCTION -> TkDo','INSTRUCTION',1,'p_statement','yacc.py',68),
  ('INSTRUCTION -> TkPrint','INSTRUCTION',1,'p_statement','yacc.py',69),
  ('INSTRUCTION -> TkId','INSTRUCTION',1,'p_statement','yacc.py',70),
]
